#! /usr/bin/env python

import sys
import os, os.path
from os.path import expanduser

import time
import argparse
from argparse import ArgumentDefaultsHelpFormatter
import csv

from whoosh.index import create_in
from whoosh.fields import *

'''
Type: List
Table: Task [task] (because 'My Work' is about tasks

Green means you already have it.
Nothing is red is either available or interesting.

Number
Created
Short Description
Assignment group
Assigned to
Caller
Solution (Customer View)
GGUS ID
Description
Close notes (Internal View)
Additional comments (Customer View)
Work notes (Internal View)

'Updated by' could be useful if can search for our whole group

Assigment group is javascript:getMyGroups()
'''

def mkix(args):
    # RC dir
    indexpath = args.rcdir + '/index'
    if not os.path.isdir(args.rcdir):
        os.mkdir(args.rcdir)
    if not os.path.isdir(indexpath):
        os.mkdir(indexpath)

    # Whoosh schema
    schema = Schema(number=TEXT, shortdesc=TEXT, desc=TEXT)
    ix = create_in(indexpath, schema)

    # Index CSV rows
    writer = ix.writer()
    with open(args.csvfile) as f:
        reader = csv.reader(f)
        reader.next() # Skip header

        t0 = time.time()
        for i, row in enumerate(reader, 1):
            # writer.add_document(number=row[0].decode('utf-8'),
            #                     shortdesc=row[2].decode('utf-8'),
            #                     desc=row[8].decode('utf-8'))
            writer.add_document(number=unicode(row[0]),
                                shortdesc=row[2].decode('latin-1'),
                                desc=row[8].decode('latin-1'))
            if i % 50 == 0:
                print "%07d ticketses\r" % i,
                sys.stdout.flush()
        print "%07d\n" % i,
        print "Committing..."
        writer.commit()
        print "Indexed %d ticketses in %.2f s" % (i, time.time() - t0)

def ls(args):
    with open(args.csvfile) as f:
        reader = csv.reader(f)
        reader.next() # Skip header
        for row in reader:
            print row[0]

def main():
    p = argparse.ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    p.add_argument('--csvfile', type=expanduser, help="SNOW CSV file",
                   default='~/Me Own Knowledge Base.csv')
    p.add_argument('--rcdir', type=expanduser, help="runtime config dir",
                   default='~/.snowplough')
    subs = p.add_subparsers()

    pl = subs.add_parser('ls', help="list ticketses")
    pl.set_defaults(func=ls)

    pm = subs.add_parser('mkix', help='make index')
    pm.set_defaults(func=mkix)

    args = p.parse_args()
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
